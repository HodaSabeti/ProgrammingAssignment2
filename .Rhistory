getwd()
dir()
find.package("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
q()
Data
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")81
install.packages("swirl")81
install.packages("swirl")
chooseCRANmirror()
install.packages("swirl")
library("swirl")
swril()
swirl()
swirl()
bye()
q()
setwd("C:/Users/Hoda/Assignment2/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(123))
makeVector(c(123))
x <- mumeric(3)
x <- mumeric()
x <- numeric(3)
x
x<- c(1,2,3)
x
makeVector(x)
makeVector(x)$getmean
makeVector()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
clear
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1,2,3)
x
cachemean(x)
makeVector(x)
cachemean(x)
a <- numeric(3)
a <- c(1,2,3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
View(cachemean)
View(makeVector)
cachemean(a)
t<-makeVector(a)
cachemean(t)
debug(cachemean)
cachemean(t)
?solve
b <- c(1:4,2,2)
b
b <- matrix(1:4,2,2)
b
solve(b)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setInverse <- function(inverse) s <<- inverse
getInverse <- function() s
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getInverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data,...)
x$setmean(s)
s
}
makeCacheMatrix(b)
tt<-makeCacheMatrix(b)
cacheSolve(tt)
debug(cacheSolve)
cacheSolve(tt)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setInverse <- function(inverse) s <<- inverse
getInverse <- function() s
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getInverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data,...)
x$setInverse(s)
s
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setInverse <- function(inverse) s <<- inverse
getInverse <- function() s
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getInverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data,...)
x$setInverse(s)
s
}
b <- matrix(1:4,2,2)
makeCacheMatrix(b)
tt<-makeCacheMatrix(b)
cacheSolve(tt)
cacheSolve(tt)
b <- matrix(3:6,2,2)
tt<-makeCacheMatrix(b)
cacheSolve(tt)
cacheSolve(tt)
cacheSolve(b)
cacheSolve(tt)
r <- matrix(1:9,3,3)
to<-makeCacheMatrix(r)
cacheSolve(to)
r <- matrix(2:10,3,3)
to<-makeCacheMatrix(r)
cacheSolve(to)
r <- matrix(4:12,3,3)
r
to<-makeCacheMatrix(r)
cacheSolve(to)
r <- matrix(c(4:10,22,78,90),3,3)
r <- matrix(c(4:10,22,78),3,3)
r
to<-makeCacheMatrix(r)
cacheSolve(to)
cacheSolve(to)
